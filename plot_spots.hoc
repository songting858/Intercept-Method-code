//mark the locations of synaptic inputs for the case of multiple inputs

load_file("preload_files.hoc")
xopen("whole_dendrites.hoc")

objref gaba1, gaba2, gaba3, gaba4, gaba5, s2
objref ampa1, ampa2, ampa3, ampa4, ampa5, ampa6, ampa7, ampa8, ampa9, ampa10, ampa11, ampa12, ampa13, ampa14, ampa15, ampa16, ampa17, ampa18, ampa19, ampa20

//the following information is generated by setup_multipleinputs.m
I_loc1 = 84		
I_loc2 = 90
I_loc3 = 92
I_loc4 = 98
I_loc5 = 74

E_loc1 = 7
E_loc2 = 11
E_loc3 = 19
E_loc4 = 24
E_loc5 = 31
E_loc6 = 35
E_loc7 = 29
E_loc8 = 42
E_loc9 = 48
E_loc10 = 124
E_loc11 = 65
E_loc12 = 77
E_loc13 = 78
E_loc14 = 108
E_loc15 = 110
E_loc16 = 130
E_loc17 = 134
E_loc18 =112 
E_loc19 =91 
E_loc20 =118 


proc main() { local i
	
	init()	 
	access soma
	distance()
//====================inhibition================================================	   		                                       
	dend[I_loc1] {
	print distance(0.5)
	gaba1= new GABAa()
	gaba1.loc(0.5)
 }
  dend[I_loc2] {
	print distance(0.5)
	gaba2= new GABAa()
	gaba2.loc(0.5)
 }
  dend[I_loc3] {
	print distance(0.5)
	gaba3= new GABAa()
	gaba3.loc(0.5)
 }
  dend[I_loc4] {
	print distance(0.5)
	gaba4= new GABAa()
	gaba4.loc(0.5)
 }
  dend[I_loc5] {
	print distance(0.5)
	gaba5= new GABAa()
	gaba5.loc(0.5)
 }

//====================excitation================================================	   		                                       
	dend[E_loc1] {
	print distance(0.5)
	ampa1= new AMPA()
	ampa1.loc(0.5)
 }
	dend[E_loc2] {
	print distance(0.5)
	ampa2= new AMPA()
	ampa2.loc(0.5)
 }
	dend[E_loc3] {
	print distance(0.5)
	ampa3= new AMPA()
	ampa3.loc(0.5)
 }
	dend[E_loc4] {
	print distance(0.5)
	ampa4= new AMPA()
	ampa4.loc(0.5)
 }
	dend[E_loc5] {
	print distance(0.5)
	ampa5= new AMPA()
	ampa5.loc(0.5)
 }
	dend[E_loc6] {
	print distance(0.5)
	ampa6= new AMPA()
	ampa6.loc(0.5)
 }
	dend[E_loc7] {
	print distance(0.5)
	ampa7= new AMPA()
	ampa7.loc(0.5)
 }
	dend[E_loc8] {
	print distance(0.5)
	ampa8= new AMPA()
	ampa8.loc(0.5)
 }
	dend[E_loc9] {
	print distance(0.5)
	ampa9= new AMPA()
	ampa9.loc(0.5)
 }
	dend[E_loc10] {
	print distance(0.5)
	ampa10= new AMPA()
	ampa10.loc(0.5)
 }
	dend[E_loc11] {
	print distance(0.5)
	ampa11= new AMPA()
	ampa11.loc(0.5)
 }
	dend[E_loc12] {
	print distance(0.5)
	ampa12= new AMPA()
	ampa12.loc(0.5)
 }
	dend[E_loc13] {
	print distance(0.5)
	ampa13= new AMPA()
	ampa13.loc(0.5)
 }
	dend[E_loc14] {
	print distance(0.5)
	ampa14= new AMPA()
	ampa14.loc(0.5)
 }
	dend[E_loc15] {
	print distance(0.5)
	ampa15= new AMPA()
	ampa15.loc(0.5)
 }
	dend[E_loc16] {
	print distance(0.5)
	ampa16= new AMPA()
	ampa16.loc(0.5)
 }
	dend[E_loc17] {
	print distance(0.5)
	ampa17= new AMPA()
	ampa17.loc(0.5)
 }
	dend[E_loc18] {
	print distance(0.5)
	ampa18= new AMPA()
	ampa18.loc(0.5)
 }
	dend[E_loc19] {
	print distance(0.5)
	ampa19= new AMPA()
	ampa19.loc(0.5)
 }
	dend[E_loc20] {
	print distance(0.5)
	ampa20= new AMPA()
	ampa20.loc(0.5)
 }

s2= new Shape()
s2.observe(whole_dendrites)

s2.point_mark(gaba1,3)
s2.point_mark(gaba2,3)
s2.point_mark(gaba3,3)
s2.point_mark(gaba4,3)
s2.point_mark(gaba5,3) 

s2.point_mark(ampa1,2)
s2.point_mark(ampa2,2)
s2.point_mark(ampa3,2)
s2.point_mark(ampa4,2)
s2.point_mark(ampa5,2)
s2.point_mark(ampa6,2)
s2.point_mark(ampa7,2)
s2.point_mark(ampa8,2)
s2.point_mark(ampa9,2)
s2.point_mark(ampa10,2)
s2.point_mark(ampa11,2)
s2.point_mark(ampa12,2)
s2.point_mark(ampa13,2)
s2.point_mark(ampa14,2)
s2.point_mark(ampa15,2)     
s2.point_mark(ampa16,2)
s2.point_mark(ampa17,2)
s2.point_mark(ampa18,2)
s2.point_mark(ampa19,2)
s2.point_mark(ampa20,2)  



s2.rotate(200,-350,0,0,0,3.4)
s2.exec_menu("Show Diam")
s2.exec_menu("200% Zoom In")
s2.printfile("spot.eps")
      
}

main()