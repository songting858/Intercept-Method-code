/* use voltage clamp to measure the effective E and I conductances when receiving multiple inputs

read input information from the file "input_location_time.dat" generated by the matlab file "setup_multipleinputs.m". The synaptic time starts from 400ms to allow the
clamped voltage to reach the steady state first

In order to perform the intercept method, this code need to be run twice with the inhibitory reversal potential set to be -80 mV and -90 mV respectively.
The corresponding clamp current data shall be saved to the output files named as "multi_EI_VClamp_1.dat" and "multi_EI_VClamp_2.dat", respectively.  */ 

load_file("preload_files.hoc")

cvode.active(0)
dt=0.1
tstop=1400

ni = 5*100    		//number of Is 
ne = 20*100    		//number of Es

//====================declare variables=========================================
objref ampa[ne], nmda[ne], stim_glut[ne]
objref gabaa[ni], gabab[ni], stim_gaba[ni] 
double I_loc[ni], E_loc[ne]
double E_start[ne], I_start[ni]
objref vol
strdef source_path, target_path 
objref savdata, recv 
recv=new Vector()
recv.record(&soma.v(0))
vol= new Vector()

access soma
	distance()
  
//===========================set inputs=========================================
for i=0, ni-1{	
	stim_gaba[i] = new NetStim1(0.5)
	stim_gaba[i].number=1
}

for j=0, ne-1{	
	stim_glut[j] = new NetStim1(0.5)
	stim_glut[j].number=1
}	

//=========================define functions====================================
proc step() {	local i
	fadvance()
		if(ngraph!=0) {
			for i=0, ngraph-1{
				g[i].plot(t)
				g[i].flush()
				doNotify()
			}
		}
}

proc run() { local j
	init()
	if(ngraph!=0) {
		for j=0, ngraph-1{
				g[j].begin()
		}
	}	
	while(t<tstop) {		
	step()}	
}

//====================initialize voltage clamp==================================
objref clampobj
soma{
  clampobj = new SEClamp(.5)
  clampobj.dur1=1
  clampobj.amp1=0
  clampobj.rs=1e-2
}

objref irec
irec =new Vector()
irec.record(&clampobj.i)

//========================define main function==================================
proc main() { local i, j
	sprint(source_path, "%s", "input_location_time.dat")
    sprint(target_path, "%s", "multi_EI_Vclamp_1.dat")

	savdata = new File()
	savdata.wopen(target_path)

//================read in input locations and times=============	
	ropen(source_path)
  for j=0, ne-1{ 	E_loc[j] = fscan() }
  for i=0, ni-1{ 	I_loc[i] = fscan() }

  for j=0, ne-1{ 	E_start[j] = fscan()
  E_start[j]=E_start[j]+400 }
  for i=0, ni-1{ 	I_start[i] = fscan() 
  I_start[i]=I_start[i]+400}
	ropen()
   
//==================set synaptic inputs========================
	for i=0, ni-1{ 		
		
	  dend[I_loc[i]] {
			 				
		I_dist=distance(0.5)
		print "I_dist	", I_dist
		
		gabaa[i]= new GABAa()
		gabab[i]= new GABAb()
		gabaa[i].loc(0.5)
		gabab[i].loc(0.5)
		setpointer gabaa[i].pre, stim_gaba[i].y	// assign presynaptic compartment
		setpointer gabab[i].pre, stim_gaba[i].y
		gabaa[i].gmax= 8e-4// 0.0003
  	gabab[i].gmax= 0//gabaa[i].gmax*gabab_gabaa_ratio
	  }	
	}
	
	for j=0, ne-1{ 		
		
	  dend[E_loc[j]] { 
	  
		E_dist=distance(0.5)
		print "E_dist	", E_dist 
	    	
		ampa[j] = new AMPA()
		nmda[j] = new NMDA()
		ampa[j].loc(0.5)
		nmda[j].loc(0.5)
		setpointer ampa[j].pre, stim_glut[j].y	// assign presynaptic compartment
		setpointer nmda[j].pre, stim_glut[j].y			
		
	 	if(!Block_NMDA_Flag){
	 	 		nmda_ampa_ratio = 0.6/(1+E_dist/300)
	 	}else{
	 	 		nmda_ampa_ratio = 0.1*0.6/(1+E_dist/300)
	 	}
	 	
	 	ampa[j].gmax	= 1.8e-4 //0.0001
		nmda[j].gmax = 0// ampa[j].gmax*nmda_ampa_ratio
		
 	  }
	}


	
//==to measure the reference E conductance without voltage clamp=======

clampobj.dur1=1
	      
  for i=0, ni-1{	      
		stim_gaba[i].start=I_start[i]+10000
	}
			
  for j=0, ne-1{
		stim_glut[j].start=E_start[j]
  }
 
run()	
vol = recv.c.sub(0)	
vol.printf(savdata,"%g \t")
irec.printf(savdata,"%g \t")

//==to measure the reference I conductance without voltage clamp======

clampobj.dur1=1

  for i=0, ni-1{	      
		stim_gaba[i].start=I_start[i]
	}
			
  for j=0, ne-1{
		stim_glut[j].start=E_start[j]+10000
  }
 
run()	
vol = recv.c.sub(0)	
vol.printf(savdata,"%g \t")
irec.printf(savdata,"%g \t")

//===E and I are given together, and voltage clamp is used=========

clampobj.dur1=tstop

for k = 1,5{
  clampobj.amp1=-110+k*10    //somatic voltage is clamped at different level
	  for i=0, ni-1{	      
		stim_gaba[i].start=I_start[i]
	}
			
  for j=0, ne-1{
		stim_glut[j].start=E_start[j]
  }

	run()	
	vol = recv.c.sub(0)	
	vol.printf(savdata,"%g \t")
	irec.printf(savdata,"%g \t")

	}
	 		                                       
	savdata.close()                                             
	print "Done!\n"                     

}	


//====================execute the main function=================================


main()

	

